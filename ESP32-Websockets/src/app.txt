import { useEffect, useState } from "react";
import "./App.css";
import useWebSocket from "react-use-websocket";

type MessageBody = {
  action: string;
  type: string;
  body: unknown;
};

const outputPins = [18, 19, 22, 23];
// const outputPins = [1, 2, 3, 4, 18];
// const outputPins = [1, 2, 3, 4, 5, 6, 7, 8];
const defultOutputPin = outputPins[0];

function App() {
  const { lastMessage, sendMessage, readyState } = useWebSocket(
    "wss://j986qr5c97.execute-api.ap-northeast-1.amazonaws.com/dev"
  );
  const [selectedPin, setSelectedPin] = useState(defultOutputPin);
  const [pinValue, setPinValue] = useState(false);

  useEffect(() => {
    if (lastMessage === null) {
      console.log("no message");
      return;
    }

    const parsedMessage = JSON.parse(lastMessage.data) as MessageBody;
    console.log("parseMessage", parsedMessage);
    console.log("selectedPin", selectedPin);

    if (parsedMessage.action !== "msg") {
      console.log("not a message");
      return;
    }

    if (parsedMessage.type === "output") {
      const body = parsedMessage.body as number;
      console.log(body);
      setPinValue(body === 0 ? false : true);
    }
  }, [lastMessage, setPinValue]);

  useEffect(() => {
    sendMessage(
      JSON.stringify({
        action: "msg",
        type: "cmd",
        body: {
          type: "digitalRead",
          pin: defultOutputPin,
        },
      })
    );

    outputPins.forEach((pin) => {
      sendMessage(
        JSON.stringify({
          action: "msg",
          type: "cmd",
          body: {
            type: "pinMode",
            pin,
            mode: "output",
          },
        })
      );
    });
  }, []);

  return (
    <div className="App">
      <h1>SmartBin Transit</h1>
      <div>
        <label className="block mb-2 text-base font-medium text-gray-900 dark:text-gray-400">
          Select a Seat
        </label>
        <select
          value={selectedPin}
          onChange={(e) => {
            const newPin = parseInt(e.target.value, 10);
            setSelectedPin(newPin);
            sendMessage(
              JSON.stringify({
                action: "msg",
                type: "cmd",
                body: {
                  type: "digitalRead",
                  pin: newPin,
                },
              })
            );
          }}
          className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
        >
          <option value={18}>A{1}</option>
          <option value={19}>A{2}</option>
          <option value={22}>A{3}</option>
          <option value={23}>A{4}</option>
          <option value={18}>B{1}</option>
          <option value={19}>B{2}</option>
          <option value={22}>B{3}</option>
          <option value={23}>B{4}</option>
        </select>
        <div className="grid grid-cols-4 gap-4">
          <button
            onClick={() => {
              setSelectedPin(18);
              // sendMessage(
              //   JSON.stringify({
              //     action: "msg",
              //     type: "cmd",
              //     body: {
              //       type: "digitalRead",
              //       pin: 18,
              //     },
              //   })
              // );
              sendMessage(
                JSON.stringify({
                  action: "msg",
                  type: "cmd",
                  body: {
                    type: "digitalWrite",
                    pin: selectedPin,
                    value: 1,
                  },
                })
              );
              setTimeout(() => {
                setPinValue(false);
                sendMessage(
                  JSON.stringify({
                    action: "msg",
                    type: "cmd",
                    body: {
                      type: "digitalWrite",
                      pin: selectedPin,
                      value: 0,
                    },
                  })
                );
              }, 3000);
            }}
            className={`bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 ${
              selectedPin === 18 ? "bg-blue-500 text-white" : ""
            } dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500`}
          >
            A1
          </button>
          <button
            onClick={() => {
              setSelectedPin(19);
              sendMessage(
                JSON.stringify({
                  action: "msg",
                  type: "cmd",
                  body: {
                    type: "digitalRead",
                    pin: 19,
                  },
                })
              );
            }}
            className={`bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 ${
              selectedPin === 19 ? "bg-blue-500 text-white" : ""
            } dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500`}
          >
            A2
          </button>
          <button
            onClick={() => {
              setSelectedPin(22);
              sendMessage(
                JSON.stringify({
                  action: "msg",
                  type: "cmd",
                  body: {
                    type: "digitalRead",
                    pin: 22,
                  },
                })
              );
            }}
            className={`bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 ${
              selectedPin === 22 ? "bg-blue-500 text-white" : ""
            } dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500`}
          >
            A3
          </button>
        </div>
      </div>
      <div className="m-4">
        <label className="relative inline-flex items-center cursor-pointer">
          <input
            type="checkbox"
            checked={pinValue}
            onChange={() => {
              const newValue = !pinValue;
              console.log(newValue);
              console.log(lastMessage);

              setPinValue(newValue);
              sendMessage(
                JSON.stringify({
                  action: "msg",
                  type: "cmd",
                  body: {
                    type: "digitalWrite",
                    pin: selectedPin,
                    value: newValue ? 1 : 0,
                  },
                })
              );
            }}
            className="sr-only peer"
          />
          <div className="w-14 h-7 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[4px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-6 after:w-6 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
          <span className="ml-3 text-sm font-medium text-gray-900 dark:text-gray-300">
            {pinValue ? "On" : "Off"}
          </span>
        </label>
      </div>
    </div>
  );
}

export default App;
